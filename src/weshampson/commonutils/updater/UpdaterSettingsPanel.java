/*
 * Copyright (C) 2014 Wes Hampson.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package weshampson.commonutils.updater;

import java.io.File;
import java.io.IOException;
import static weshampson.commonutils.updater.UpdaterSettingsManager.*;

/**
 *
 * @author Wes Hampson
 * @version 0.3.1 (Nov 23, 2014)
 * @since   0.3.0 (Sep 27, 2014)
 */
public class UpdaterSettingsPanel extends javax.swing.JPanel {
    private final File configFile;
    public UpdaterSettingsPanel(File configFile) {
        this.configFile = configFile;
        initComponents();
        loadSettings();
    }
    private void loadSettings() {
        updateURLTextField.setText(UpdaterSettingsManager.get(PROPERTY_UPDATE_URL));
        String buildState = UpdaterSettingsManager.get(PROPERTY_BUILD_STATE);
        if (buildState.equals("*")) {
            buildState = "all";
        }
        buildStateComboBox.setSelectedItem(buildState);
        checkForUpdatesOnStartupCheckBox.setSelected(Boolean.valueOf(UpdaterSettingsManager.get(PROPERTY_CHECK_ON_STARTUP)));
    }
    public void loadDefaultSettings() {
        updateURLTextField.setText(UpdaterSettingsManager.getDefault(PROPERTY_UPDATE_URL));
        String buildState = UpdaterSettingsManager.getDefault(PROPERTY_BUILD_STATE);
        if (buildState.equals("*")) {
            buildState = "all";
        }
        buildStateComboBox.setSelectedItem(buildState);
        checkForUpdatesOnStartupCheckBox.setSelected(Boolean.valueOf(UpdaterSettingsManager.getDefault(PROPERTY_CHECK_ON_STARTUP)));

    }
    public void saveSettings() throws IOException {
        UpdaterSettingsManager.set(PROPERTY_UPDATE_URL, updateURLTextField.getText());
        String buildState = (String)buildStateComboBox.getSelectedItem();
        if (buildState.equals("all")) {
            buildState = "*";
        }
        UpdaterSettingsManager.set(PROPERTY_BUILD_STATE, buildState);
        UpdaterSettingsManager.set(PROPERTY_CHECK_ON_STARTUP, Boolean.toString(checkForUpdatesOnStartupCheckBox.isSelected()));
        UpdaterSettingsManager.saveSettings(configFile);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updateURLLabel = new javax.swing.JLabel();
        updateURLTextField = new javax.swing.JTextField();
        buildStateLabel = new javax.swing.JLabel();
        buildStateComboBox = new javax.swing.JComboBox();
        checkForUpdatesOnStartupCheckBox = new javax.swing.JCheckBox();

        updateURLLabel.setText("Update URL:");

        buildStateLabel.setText("Build state:");

        buildStateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "alpha", "beta", "stable", "all" }));

        checkForUpdatesOnStartupCheckBox.setText("Check for updates on startup");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateURLTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateURLLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buildStateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buildStateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(checkForUpdatesOnStartupCheckBox))
                        .addGap(0, 121, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(updateURLLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buildStateLabel)
                    .addComponent(buildStateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkForUpdatesOnStartupCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox buildStateComboBox;
    private javax.swing.JLabel buildStateLabel;
    private javax.swing.JCheckBox checkForUpdatesOnStartupCheckBox;
    private javax.swing.JLabel updateURLLabel;
    private javax.swing.JTextField updateURLTextField;
    // End of variables declaration//GEN-END:variables
}